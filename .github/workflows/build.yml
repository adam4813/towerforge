name: Build TowerForge (Windows, Linux, macOS)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            compiler: msvc
            build_type: Release
            vcpkg_triplet: x64-windows

          # Linux builds - GCC
          - os: ubuntu-latest
            compiler: gcc
            build_type: Release
            vcpkg_triplet: x64-linux
            cc: gcc-10
            cxx: g++-10

          # Linux builds - Clang
          - os: ubuntu-latest
            compiler: clang
            build_type: Release
            vcpkg_triplet: x64-linux
            cc: clang-12
            cxx: clang++-12

          # macOS builds
          - os: macos-latest
            compiler: clang
            build_type: Release
            vcpkg_triplet: x64-osx

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          xvfb

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'c8696863d371ab7f46e213d8f5ca923c4aef2a00'
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Set environment variables (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} -j 4

    - name: List build outputs
      shell: bash
      run: |
        echo "=== Build directory structure ==="
        ls -R build/bin/ || ls -R build/Release/ || ls -R build/Debug/ || true

    - name: Prepare artifacts (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        mkdir -p artifacts
        # Copy executables from Release folder
        if [ -f "build/bin/Release/towerforge.exe" ]; then
          cp build/bin/Release/towerforge.exe artifacts/
          cp build/bin/Release/screenshot_app.exe artifacts/ || true
        elif [ -f "build/Release/towerforge.exe" ]; then
          cp build/Release/towerforge.exe artifacts/
          cp build/Release/screenshot_app.exe artifacts/ || true
        fi
        # Copy vcpkg installed DLLs if they exist
        if [ -d "vcpkg_installed/${{ matrix.vcpkg_triplet }}/bin" ]; then
          cp vcpkg_installed/${{ matrix.vcpkg_triplet }}/bin/*.dll artifacts/ || true
        fi
        ls -la artifacts/

    - name: Prepare artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p artifacts
        if [ -f "build/bin/towerforge" ]; then
          cp build/bin/towerforge artifacts/
          cp build/bin/screenshot_app artifacts/ || true
        fi
        chmod +x artifacts/* || true
        ls -la artifacts/

    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cd artifacts
        7z a ../TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.zip *

    - name: Create archive (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd artifacts
        tar -czf ../TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.tar.gz *

    - name: Upload artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}
        path: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.zip
        retention-days: 30

    - name: Upload artifact (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}
        path: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.tar.gz
        retention-days: 30
