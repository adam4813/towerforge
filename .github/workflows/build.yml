name: Build TowerForge (Windows, Linux, macOS)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            compiler: msvc
            build_type: Release
            vcpkg_triplet: x64-windows

          # Linux builds - GCC
          - os: ubuntu-latest
            compiler: gcc
            build_type: Release
            vcpkg_triplet: x64-linux

          # Linux builds - Clang (temporarily disabled)
          # - os: ubuntu-latest
          #   compiler: clang
          #   build_type: Release
          #   vcpkg_triplet: x64-linux

          # macOS builds (temporarily disabled)
          # - os: macos-latest-large
          #   compiler: clang
          #   build_type: Release
          #   vcpkg_triplet: x64-osx

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          xvfb

    - name: Setup Cpp
      if: matrix.compiler != 'msvc'
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ runner.os == 'Windows' }}

    - uses: lukka/get-cmake@latest

    - name: Restore artifacts, or run vcpkg, build and cache artifacts
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: dd3097e305afa53f7b4312371f62058d2e665320

    - name: Run CMake with Presets (Windows)
      uses: lukka/run-cmake@v10
      with:
        configurePreset: native
        buildPreset: native-release

    - name: List build outputs
      shell: bash
      run: |
        echo "=== Build directory structure ==="
        ls -R build/bin/ || ls -R build/Release/ || ls -R build/Debug/ || true

    - name: Prepare artifacts (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        mkdir -p artifacts
        # Copy executables from Release folder
        if [ -f "build/bin/Release/towerforge.exe" ]; then
          cp build/bin/Release/towerforge.exe artifacts/
          cp build/bin/Release/screenshot_app.exe artifacts/ || true
          cp build/bin/Release/*.dll artifacts/ || true
        elif [ -f "build/Release/towerforge.exe" ]; then
          cp build/Release/towerforge.exe artifacts/
          cp build/Release/screenshot_app.exe artifacts/ || true
          cp build/Release/*.dll artifacts/ || true
        fi
        
        # Copy lua mods
        cp mods/*.lua artifacts/mods || true
        
        # Copy vcpkg installed DLLs if they exist
        if [ -d "vcpkg_installed/${{ matrix.vcpkg_triplet }}/bin" ]; then
          cp vcpkg_installed/${{ matrix.vcpkg_triplet }}/bin/*.dll artifacts/ || true
        fi
        ls -la artifacts/

    - name: Prepare artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p artifacts
        if [ -f "build/bin/towerforge" ]; then
          cp build/bin/towerforge artifacts/
          cp build/bin/screenshot_app artifacts/ || true
        fi
        
        cp mods/*.lua artifacts/mods || true
        
        chmod +x artifacts/* || true
        ls -la artifacts/

    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cd artifacts
        7z a ../TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.zip *

    - name: Create archive (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd artifacts
        tar -czf ../TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.tar.gz *

    - name: Upload artifact (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}
        path: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.zip
        retention-days: 30

    - name: Upload artifact (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}
        path: TowerForge-${{ matrix.os }}-${{ matrix.compiler }}.tar.gz
        retention-days: 30
